disp('================================');
close all; clear variables; dbstop error;
% Main file. Simply run this with the demo data for testing.
% Typical Workflow:
% - adapt config.m to your needs (data directory location, classes, ...)
% - run config.m initially to generate the directories
% - add images to image directory
% - run run_labelImages for annotation with polygons
% - run run_labelToSegments to convert polygons to semantic and instance labels

% source config
config;

% figure
h_f = figure('units','normalized','outerposition',[0 0.03 1 0.97]);
h_a = axes('Position',[0 0 1 0.97]); axis off;

% get file names
file  = 1;
files = dir([image_dir, '/*.JPG']);
number_of_files = length(files);
file_name = files(file).name;

% display first file
I = imread([image_dir '/' file_name]);
try load([label_dir '/' file_name(1:end-4) '.mat']); catch err, L = []; end;
showAndSaveLabels(h_a,I,L,label_dir,file_name,file,number_of_files);

% button
uicontrol('Style', 'pushbutton', 'String', '<<', ...
          'Position', [20 20 60 30], ... 
          'Callback', ['file = file-1; if file<1, file=1; end; file_name = files(file).name;' ...
                       'I = imread([image_dir ''/'' file_name]);' ...
                       'try load([label_dir ''/'' file_name(1:end-4) ''.mat'']); catch err, L = []; end;' ...
                       'showAndSaveLabels(h_a,I,L,label_dir,file_name,file,number_of_files);']);

uicontrol('Style', 'pushbutton', 'String', '>>', ...
          'Position', [100 20 60 30], ... 
          'Callback', ['file = file+1; if file>number_of_files, file=number_of_files; end; file_name = files(file).name;' ...
                       'I = imread([image_dir ''/'' file_name]);' ...
                       'try load([label_dir ''/'' file_name(1:end-4) ''.mat'']); catch err, L = []; end;' ...
                       'showAndSaveLabels(h_a,I,L,label_dir,file_name,file,number_of_files);']);
                     
uicontrol('Style', 'pushbutton', 'String', 'Add Label', ...
          'Position', [180 20 100 30], ... 
          'Callback', ['polyline = getline(h_a);' ...
                       'class = chooseClass();' ... 
                       'if ~isempty(class)'...
                       '  L{end+1}.class  = class;' ...
                       '  L{end}.polyline = polyline;' ...
                       '  showAndSaveLabels(h_a,I,L,label_dir,file_name,file,number_of_files);' ...
                       'end;']);
                     
uicontrol('Style', 'pushbutton', 'String', 'Remove Label', ...
          'Position', [300 20 100 30], ... 
          'Callback', ['[u,v] = ginput(1);' ...
                       'label_num = getClosestLabel(L,u,v);' ... 
                       'if ~isempty(label_num)'...
                       '  L(label_num)=[];' ...
                       '  showAndSaveLabels(h_a,I,L,label_dir,file_name,file,number_of_files);' ...
                       'end;']);

uicontrol('Style', 'pushbutton', 'String', 'Exit', ...
          'Position', [420 20 100 30], ... 
          'Callback', 'clear all; close all;');
